unit u_fMainCaja;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Grids, Vcl.ExtCtrls, Data.DB, Vcl.DBGrids,
  Vcl.StdCtrls, System.ImageList, Vcl.ImgList, Vcl.VirtualImageList, Vcl.BaseImageCollection,
  Vcl.ImageCollection, Vcl.Buttons;
type
  TfMainCajas = class(TForm)
    pnlCabecera: TPanel;
    strGridDetalles: TStringGrid;
    Panel1: TPanel;
    Label2: TLabel;
    Label3: TLabel;
    Label1: TLabel;
    Label4: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    ComboBox1: TComboBox;
    Panel2: TPanel;
    SpeedButton2: TSpeedButton;
    SpeedButton3: TSpeedButton;
    ImageCollection1: TImageCollection;
    VirtualImageList1: TVirtualImageList;
    Shape1: TShape;
    SpeedButton1: TSpeedButton;
    SpeedButton4: TSpeedButton;
    SpeedButton5: TSpeedButton;
    SpeedButton6: TSpeedButton;
    SpeedButton7: TSpeedButton;
    SpeedButton8: TSpeedButton;
    procedure FormCreate(Sender: TObject);
    procedure FormResize(Sender: TObject);
  private
    procedure strGridDetalles_IniciarColumnas;
    procedure strGridDetalles_AjustarColumnas;
    procedure strGridDetallesDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    function FormatearValor(ACol: Integer; const Valor: string): string;
  public
    { Public declarations }
  end;
var
  fMainCajas: TfMainCajas;
implementation
{$R *.dfm}
function TfMainCajas.FormatearValor(ACol: Integer; const Valor: string): string;
begin
  // Formateo de valores según la columna
  case ACol of
    0: Result := FormatDateTime('dd/mm/yyyy', StrToDateDef(Valor, 0)); // Columna FECHA
    5, 6: Result := FormatFloat('#,##0.00', StrToFloatDef(Valor, 0)); // DEBITOS y CREDITOS
  else
    Result := Valor; // Sin formato
  end;
end;


procedure TfMainCajas.strGridDetallesDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect;
  State: TGridDrawState);
var
  DisplayRect: TRect;
  s: string;
begin
  with strGridDetalles.Canvas do
  begin
    // Obtener el rectángulo de la celda a dibujar
    DisplayRect := Rect;
    InflateRect(DisplayRect, -2, -2);
    // Colorear la primera fila de verde
    if ARow = 0 then
    begin
      Brush.Color := RGB(52, 73, 94 );
      Font.Color  := clWhite;
      Font.Style  := [fsBold];
      Font.Size   := 8;
    end
    else
    begin
      // Alternar colores entre filas
      if Odd(ARow) then
        Brush.Color := clSilver  // Fila impar en gris claro
      else
        Brush.Color := clWhite;   // Fila par en blanco
    end;
    // Llenar la celda con el color de fondo
    FillRect(Rect);
    // Obtener el texto de la celda
    s := strGridDetalles.Cells[ACol, ARow];
    // Aplicar formato solo a las filas de datos (a partir de fila 1)
    if ARow > 0 then
    begin
      // Formato numérico para las columnas DEBITOS y CREDITOS
      if (ACol = 5) or (ACol = 6) then
      begin
        s := FormatFloat('#,##0.00', StrToFloatDef(s, 0));
      end
      // Formato de fecha para la columna FECHA
      else if (ACol = 0) then
      begin
        s := FormatDateTime('dd/mm/yyyy', StrToDateDef(s, 0));
      end;
    end;
    // Alineación del texto
    if ARow = 0 then
    begin
      // Encabezado: centrado horizontal y vertical
      TextOut(DisplayRect.Left + (Rect.Width div 2) - (TextWidth(s) div 2),
              DisplayRect.Top + (Rect.Height div 2) - (TextHeight(s) div 2), s);
    end
    else
    begin
      // Alineación de columnas
      case ACol of
        0: // FECHA: centrado horizontal y vertical
        begin
          TextOut(DisplayRect.Left + (Rect.Width div 2) - (TextWidth(s) div 2),
                  DisplayRect.Top + (Rect.Height div 2) - (TextHeight(s) div 2), s);
        end;
        5, 6: // DEBITOS y CREDITOS: alineados a la derecha
        begin
          TextOut(DisplayRect.Right - TextWidth(s) - 2,
                  DisplayRect.Top + (Rect.Height div 2) - (TextHeight(s) div 2), s);
        end;
        else // Otras columnas: alineadas a la izquierda
        begin
          TextOut(DisplayRect.Left + 2,
                  DisplayRect.Top + (Rect.Height div 2) - (TextHeight(s) div 2), s);
        end;
      end;
    end;
  end;
end;
procedure TfMainCajas.strGridDetalles_AjustarColumnas;
var
  anchoTotal: Integer;
begin
  anchoTotal := strGridDetalles.ClientWidth;
  with strGridDetalles do
  begin
    // Configurar columnas del TStringGrid
    ColWidths[0] := (anchoTotal * 8) div 100;  // FECHA 10%
    ColWidths[1] := (anchoTotal * 8) div 100;  // DOCUMENTO 10%
    ColWidths[2] := (anchoTotal * 5) div 100;   // TIPO 5%
    ColWidths[3] := (anchoTotal * 20) div 100;  // BENEFICIARIO 15%
    ColWidths[4] := (anchoTotal * 30) div 100;  // CONCEPTO 25%
    ColWidths[5] := (anchoTotal * 10) div 100;  // DEBITOS 15%
    ColWidths[6] := (anchoTotal * 10) div 100;  // CREDITOS 15%
    ColWidths[7] := (anchoTotal * 5) div 100;   // STATUS 5%
  end;
end;
procedure TfMainCajas.strGridDetalles_IniciarColumnas;
begin
  with strGridDetalles do
  begin
    DefaultDrawing := False;
    ColCount  := 8;
    RowCount  := 2;
    FixedRows := 1;
    RowHeights[0] := 25;  // Alto del encabezado
    RowHeights[1] := 15;  // Alto de las filas de datos
    // Configurar nombres de columnas
    Cells[0, 0] := 'ST';
    Cells[1, 0] := 'FECHA';
    Cells[2, 0] := 'DOCUMENTO';
    Cells[3, 0] := 'TIPO';
    Cells[4, 0] := 'BENEFICIARIO';
    Cells[5, 0] := 'CONCEPTO';
    Cells[6, 0] := 'DEBITOS';
    Cells[7, 0] := 'CREDITOS';
    Cells[8, 0] := 'CREDITOS';

  end;
end;
procedure TfMainCajas.FormCreate(Sender: TObject);
begin
  strGridDetalles_IniciarColumnas;
  strGridDetalles_AjustarColumnas;
  strGridDetalles.OnDrawCell := strGridDetallesDrawCell;
end;
procedure TfMainCajas.FormResize(Sender: TObject);
begin
  strGridDetalles_AjustarColumnas;
end;
end.
